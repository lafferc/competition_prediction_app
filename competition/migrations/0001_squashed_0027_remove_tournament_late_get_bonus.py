# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-01-04 22:20
from __future__ import unicode_literals

import competition.models
from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:

class Migration(migrations.Migration):

    replaces = [('competition', '0001_initial'), ('competition', '0002_auto_20161207_0025'), ('competition', '0003_sport_add_teams'), ('competition', '0004_tournament_add_matches'), ('competition', '0005_auto_20170426_2007'), ('competition', '0006_auto_20170501_0016'), ('competition', '0007_auto_20170501_1155'), ('competition', '0008_auto_20170506_1024'), ('competition', '0009_auto_20170506_1144'), ('competition', '0010_tournament_year'), ('competition', '0011_auto_20170506_1238'), ('competition', '0012_auto_20170507_1511'), ('competition', '0013_tournament_display_margin_per_game'), ('competition', '0014_auto_20180302_1316'), ('competition', '0015_auto_20180303_2126'), ('competition', '0016_tournament_test_features_enabled'), ('competition', '0017_remove_tournament_display_margin_per_game'), ('competition', '0018_auto_20190217_2313'), ('competition', '0019_auto_20191009_0804'), ('competition', '0020_auto_20191013_2150'), ('competition', '0019_benchmark'), ('competition', '0020_auto_20190928_2344'), ('competition', '0021_merge'), ('competition', '0022_auto_20200127_0123'), ('competition', '0023_auto_20210131_2118'), ('competition', '0024_tournament_draw_definition'), ('competition', '0025_auto_20210525_2305'), ('competition', '0026_auto_20210527_2159'), ('competition', '0027_remove_tournament_late_get_bonus')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_id', models.IntegerField()),
                ('kick_off', models.DateTimeField()),
                ('score', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entered', models.DateTimeField(auto_now_add=True)),
                ('prediction', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('late', models.BooleanField(default=False)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('margin', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('correct', models.NullBooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=3)),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Sport')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('bonus', models.DecimalField(blank=True, decimal_places=2, default=2, max_digits=5, null=True)),
                ('participants', models.ManyToManyField(through='competition.Participant', to=settings.AUTH_USER_MODEL)),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Sport')),
                ('state', models.IntegerField(choices=[(0, b'Pending'), (1, b'Active'), (2, b'finished')], default=1)),
            ],
        ),
        migrations.AddField(
            model_name='participant',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Tournament'),
        ),
        migrations.AddField(
            model_name='participant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='match',
            name='away_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_away_team', to='competition.Team'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_home_team', to='competition.Team'),
        ),
        migrations.AddField(
            model_name='match',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Tournament'),
        ),
        migrations.AlterUniqueTogether(
            name='prediction',
            unique_together=set([('user', 'match')]),
        ),
        migrations.AddField(
            model_name='participant',
            name='margin_per_match',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True),
        ),
        migrations.AlterField(
            model_name='participant',
            name='score',
            field=models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='participant',
            unique_together=set([('tournament', 'user')]),
        ),
        migrations.AlterField(
            model_name='match',
            name='kick_off',
            field=models.DateTimeField(verbose_name=b'Start Time'),
        ),
        migrations.AddField(
            model_name='match',
            name='away_team_winner_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_next_away', to='competition.Match'),
        ),
        migrations.AddField(
            model_name='match',
            name='home_team_winner_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='match_next_home', to='competition.Match'),
        ),
        migrations.AddField(
            model_name='match',
            name='postponed',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together=set([('tournament', 'match_id')]),
        ),
        migrations.AddField(
            model_name='tournament',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='competition.Participant'),
        ),
        migrations.AddField(
            model_name='sport',
            name='add_teams',
            field=models.FileField(blank=True, null=True, upload_to=''),
        ),
        migrations.AddField(
            model_name='tournament',
            name='add_matches',
            field=models.FileField(blank=True, null=True, upload_to=b''),
        ),
        migrations.AlterModelOptions(
            name='tournament',
            options={'permissions': (('csv_upload', 'Can add matches via CSV upload file'),)},
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set([('name', 'sport')]),
        ),
        migrations.AddField(
            model_name='tournament',
            name='draw_bonus',
            field=models.DecimalField(decimal_places=2, default=1, max_digits=5),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='bonus',
            field=models.DecimalField(decimal_places=2, default=2, max_digits=5),
        ),
        migrations.AddField(
            model_name='sport',
            name='match_start_verb',
            field=models.CharField(default='Kick Off', max_length=50),
        ),
        migrations.AddField(
            model_name='sport',
            name='scoring_unit',
            field=models.CharField(default='point', max_length=50),
        ),
        migrations.AddField(
            model_name='tournament',
            name='year',
            field=models.IntegerField(choices=[(2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020)], default=competition.models.current_year),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='state',
            field=models.IntegerField(choices=[(0, b'Pending'), (1, b'Active'), (2, b'finished'), (3, b'archived')], default=1),
        ),
        migrations.AddField(
            model_name='tournament',
            name='test_features_enabled',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterModelOptions(
            name='match',
            options={'verbose_name_plural': 'matches'},
        ),
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('margin_per_match', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('name', models.CharField(max_length=50)),
                ('prediction_algorithm', models.IntegerField(choices=[(0, b'Fixed value'), (1, b'Average'), (2, b'Random range')])),
                ('static_value', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('range_start', models.IntegerField(blank=True, null=True)),
                ('range_end', models.IntegerField(blank=True, null=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Tournament')),
            ],
        ),
        migrations.CreateModel(
            name='BenchmarkPrediction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('margin', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('benchmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Benchmark')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competition.Match')),
                ('correct', models.NullBooleanField()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='benchmarkprediction',
            unique_together=set([('benchmark', 'match')]),
        ),
        migrations.AlterField(
            model_name='match',
            name='match_id',
            field=models.IntegerField(blank=True),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='state',
            field=models.IntegerField(choices=[(0, b'Pending'), (1, b'Active'), (2, b'Finished'), (3, b'Archived')], default=1),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='year',
            field=models.IntegerField(choices=[(2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021)], default=competition.models.current_year),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='state',
            field=models.IntegerField(choices=[(0, b'Pending'), (1, b'Active'), (2, b'Finished'), (3, b'Archived')], default=0),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='year',
            field=models.IntegerField(choices=[(2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022)], default=competition.models.current_year),
        ),
        migrations.AddField(
            model_name='tournament',
            name='draw_definition',
            field=models.CharField(blank=True, choices=[('normal_time', 'normal_time'), ('extra_time', 'extra_time')], default='extra_time', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='benchmark',
            name='prediction_algorithm',
            field=models.IntegerField(choices=[(0, 'Fixed value'), (1, 'Average'), (2, 'Random range')]),
        ),
        migrations.AlterField(
            model_name='match',
            name='kick_off',
            field=models.DateTimeField(verbose_name='Start Time'),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='add_matches',
            field=models.FileField(blank=True, null=True, upload_to=''),
        ),
        migrations.AlterField(
            model_name='tournament',
            name='state',
            field=models.IntegerField(choices=[(0, 'Pending'), (1, 'Active'), (2, 'Finished'), (3, 'Archived')], default=0),
        ),
    ]
